# -*- coding: utf-8 -*-
"""Product demand prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zKfy1T8CX0RUi4Vc1D_hf30nWEbViDdT

Bold = \033[1m
Italics = \033[3m
Underline = \033[4m
Close = \033[0m
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

import pandas as pd
df=pd.read_csv("demand.csv")

print(df)

print("\033[1;4mHead of the dataset:\033[0m\n")
print(df.head())

print("\033[1;4mTail of the dataset:\033[0m\n")
print(df.tail())

print("\033[1;4mShape of the dataset:\033[0m\n")
print(df.shape)

print("\033[1;4mInformation of the dataset\033[0m\n")
print(df.info())

#Finding the Count of the dataset
print("\033[1;4mCount the values:\033[0m\n\n",df.count())

#Finding the Missing values in the dataset
print("\033[1;4mmissing values in the dataset:\033[0m\n")
print(df.isnull().sum())

#Finding the Duplicated Items of the dataset
d=df[df.duplicated()]
print("\033[1;4mDuplicate entries:\033[0m\n")
print(d)

#descriptive statistics
print("\033[1;4mMean:\033[0m\n",df.mean())
print("\033[1;4mMedian:\033[0m\n",df.median())
print("\033[1;4mVariance:\033[0m\n",df.var())
print("\033[1;4mStandard deviation:\033[0m\n",df.std())
print("\033[1;4mMaximum value:\033[0m\n",df.max())
print("\033[1;4mMinimum value:\033[0m\n",df.min())

##Finding the Interquartile range of the dataset
print("\033[1;4mInterquartile:\033[0m\n\n",df.quantile())

#Aggregate functions
x=df.aggregate(["sum"])
print(x)
y=df.aggregate(["max"])
print(y)
z=df.aggregate(["mean"])
print(z)
s=df.aggregate(["sem"])
print(s)
p=df.aggregate(["var"])
print(p)
q=df.aggregate(["prod"])
print(q)

# descriptive statistics for Grouped data
df1=df.groupby(['UnitsSold'])
print(df1.first())
print("Mean=\n",df1['UnitsSold'].mean())
print("Median=\n",df1['UnitsSold'].median())
print("Variance=\n",df1['UnitsSold'].var())
print("Standard deviation=\n",df1['UnitsSold'].std())
print("Maximum value=\n",df1['UnitsSold'].max())
print("Minimum value=\n",df1['UnitsSold'].min())

#Skewness
print(df.skew())

#Kurtosis
print(df.kurtosis())

import seaborn as sns
fig=plt.figure()
ax=plt.axes(projection='3d')
x=df['UnitsSold']
y=df['SoldPrice']
z=df['TotalPrice']
ax.plot3D(x,y,z,'Red')
ax.set_title('Product Demand')
plt.show()

plt.plot(df.UnitsSold,df.SoldPrice)
plt.title("Units sold vs sold price ")
plt.xlabel("Units sold")
plt.ylabel("Sold price")
plt.show()

sns.pairplot(data=df)
plt.show()

plt.hist(df.UnitsSold,bins=30)
plt.title("sold")
plt.xlabel("sold")
plt.show()

df.plot(kind='box',subplots=True,layout=(5,3),figsize=(12,12))
plt.show()

f,ax=plt.subplots(figsize=(10,6))
x=df['UnitsSold']
ax=sns.kdeplot(x,shade=True,color='r')
plt.show()

sns.heatmap(df.corr())
plt.show()

"""Linear Regression"""

x=df['UnitsSold']
y =df['SoldPrice']

x.head()

y.head()

x.shape

y.shape

x=x.values.reshape(-1,1)

x.shape

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.6,test_size=0.4,random_state=100)

print(x.shape)
print(y.shape)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

regr = linear_model.LinearRegression()
regr.fit(x_train,y_train)

regr.coef_

regr.intercept_

plt.scatter(x_train, y_train)
plt.plot(x_train,717.25 +0.00010784 *x_train, 'r')
plt.show()

y_pred = regr.predict(x_test)

res = (y_test - y_pred)
print(res)

r_squared = r2_score(y_test, y_pred)
r_squared

print('Mean squared error: %.2f'% mean_squared_error(y_test, y_pred))
print('Mean Absolute Error: %.2f'% mean_absolute_error(y_test, y_pred))

"""Multiple regression"""

X=df[['UnitsSold','SoldPrice','StoreID']]
Y=df['TotalPrice']

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=101)

reg=linear_model.LinearRegression()

reg.fit(X_train,Y_train)
Y_predict=reg.predict(X_test)
print(Y_predict)

print('Coefficients:',reg.coef_)

print('Variance score:{}'.format(reg.score(X_test,Y_test)))